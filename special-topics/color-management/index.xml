<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>color management on darktable user manual</title>
    <link>https://elstoc.github.io/dtdocs/special-topics/color-management/</link>
    <description>Recent content in color management on darktable user manual</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://elstoc.github.io/dtdocs/special-topics/color-management/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>overview</title>
      <link>https://elstoc.github.io/dtdocs/special-topics/color-management/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elstoc.github.io/dtdocs/special-topics/color-management/overview/</guid>
      <description>darktable employs a fully color managed workflow:
  Input color specifications are taken from embedded or user-supplied ICC profiles or &amp;ndash; in the case of raw files &amp;ndash; from a library of camera-specific color matrices.
  darktable automatically reads the display profile of your monitor (if properly configured) for accurate on-screen color rendition. Multi-screen setups are fully supported as long as a system service like colord is in place and properly set up to inform darktable of the correct monitor profile.</description>
    </item>
    
    <item>
      <title>display profile</title>
      <link>https://elstoc.github.io/dtdocs/special-topics/color-management/display-profile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elstoc.github.io/dtdocs/special-topics/color-management/display-profile/</guid>
      <description>For darktable to accurately render colors on screen it needs to find the correct display profile for your monitor. In general this requires your monitor to be properly calibrated and profiled, and it needs the profile to be correctly installed on your system. darktable queries your X display server&amp;rsquo;s xatom as well as the system service colord (if available) for the right profile. If required you can enforce a specific method in preferences &amp;gt; miscellaneous.</description>
    </item>
    
    <item>
      <title>rendering method</title>
      <link>https://elstoc.github.io/dtdocs/special-topics/color-management/rendering-method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elstoc.github.io/dtdocs/special-topics/color-management/rendering-method/</guid>
      <description>darktable can render colors either with its internal algorithms or by using the external library LittleCMS2. darktable&amp;rsquo;s internal method is, by an order of magnitude, faster than the external one. The external option gives you a choice of the rendering intent and might offer a slightly higher accuracy in some cases.
You can change the default method in preferences &amp;gt; processing &amp;gt; always use LittleCMS 2 to apply output color profile</description>
    </item>
    
    <item>
      <title>rendering intent</title>
      <link>https://elstoc.github.io/dtdocs/special-topics/color-management/rendering-intent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elstoc.github.io/dtdocs/special-topics/color-management/rendering-intent/</guid>
      <description>If rendering with LittleCMS2 is activated (see rendering method) you can define how out-of-gamut colors are handled when converting between color spaces. A selection box in the export selected module, the output color profile module, and soft proof gives you a choice of the following rendering intents:
 perceptual Suited to photographs as it maintains the relative position of colors. This is usually the best choice. relative colorimetric Out-of-gamut colors are converted to colors having the same lightness, but different saturation.</description>
    </item>
    
    <item>
      <title>darktable&#39;s color spaces</title>
      <link>https://elstoc.github.io/dtdocs/special-topics/color-management/color-spaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elstoc.github.io/dtdocs/special-topics/color-management/color-spaces/</guid>
      <description>darktable&amp;rsquo;s input images are either RGB files (like JPEGs or TIFFs) or camera raws. Both represent colors by a combination of red, green and blue. Most of the actual image processing takes place in a large RGB &amp;ldquo;working profile&amp;rdquo; space, with some (mostly older) modules internally working in the CIELAB color space (often just called “Lab”). The final output of the image processing pipeline is once again in an RGB space shaped for either monitor display or the output file.</description>
    </item>
    
    <item>
      <title>unbounded colors</title>
      <link>https://elstoc.github.io/dtdocs/special-topics/color-management/unbounded-colors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elstoc.github.io/dtdocs/special-topics/color-management/unbounded-colors/</guid>
      <description>Theoretically the individual components of color data are confined to certain minimum and maximum levels. As an example the intensity of an individual red, green or blue color channel in RGB can be anything in the range between 0% and 100% (or between 0.0 and 1.0). Likewise the L channel in Lab can be anything between 0 (pure black) and 100 (pure white).
In practice the image processing steps in darktable&amp;rsquo;s modules can sometimes lead to values which lie outside of these confined ranges.</description>
    </item>
    
    <item>
      <title>possible color artifacts</title>
      <link>https://elstoc.github.io/dtdocs/special-topics/color-management/color-artifacts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://elstoc.github.io/dtdocs/special-topics/color-management/color-artifacts/</guid>
      <description>There are some infrequent situations which still can lead to problematic results unless the user takes some action. Some modules in Lab color space, like levels and monochrome, need to rely on the fact that the L channels carries all lightness information, with the a and b channels purely representing chroma and hue. Unbounded colors with negative L values are especially problematic to these modules and can lead to black pixel artifacts.</description>
    </item>
    
  </channel>
</rss>
